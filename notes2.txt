  const publishedDateFormatted = new Intl.DateTimeFormat('pt-BR', {
    day: '2-digit',
    month: 'long',
    hour: '2-digit',
    minute: '2-digit'
  }).format(publishedAt)

  result: 13 de outubro às 22:22

  ______________


  Lib date-fns: https://date-fns.org/
  
  ______________

  # Imperative programming
  What should be done (step-by-step).
  ## Cake recipe
  1. Turn on the oven at 180°;
  2. Open the oven door;
  3. Place the dough in a mold;
  3. Place the mold with the dough inside the oven;
  
  # Declarative programming
  What are the conditions for me to have the final result?
  ## Cake recipe
  1. The oven needs to be at 180°;
  2. When the oven is hot, I can put the dough to bake;
  3. When the dough is ready, I can remove it from the oven.

  Declarative
    const [comments, setComments] = useState([
      "Maravilha!!"
    ]);
    const [newCommentText, setNewCommentText] = useState('');
    ..................
    function handleCreateNewComment() {    
      setComments([...comments, newCommentText]);
      setNewCommentText('');
    }

    function handleNewCommentChange(event) {
      setNewCommentText(event.target.value)
    }
    ..................
    <textarea
      placeholder='Deixe um comentário'
      onChange={handleNewCommentChange}
      value={newCommentText}
    />


    __________________________


    
Why unique?
Three moments when a component re-renders in React.
  1. When the status changes;
  2. When component's props changes;
  3. When a parent component re-renders;

Daí a importancia de termos as keys únicas!!! pois o react vai checando o novo estado, com o estado antigo e comparando as chaves de antes com as que mudaram:

1, 2, 3, 4

|  |  |  |  n
v  v  v  v  e
            w
1, 2, 3, 4, 5  
            daí, vai renderizar novamente apenas o novo (5)

Porque nao é indicado usarmos o index do array como key?
const posts = [1,2,3,4,5]
// indexs -> 0,1,2,3,4

imagine q por algum motivo trocamos de posicao dois intens
posts = [1,2,5,4,3]  -> assim, o react vai renderizar novamente (mas, os indexs nao mudaram de posicao!!)
daí, nós so trocamos de posicao, mas o react vai entender que mudou tudom, entao vai renderizar tudo de novo

 - e por isso nao podemos usar algum numero gerado aleatoriamente (pois a cada refresh teremos outro valor aleatorio - temos que ter a key unica e imutavel)

 A KEY PRECISA SER ÚNICA NA RENDERIZAÇÃO DE CADA COMPONENTE
    - POR EXEMPLO, PARA CADA post (DENTRO DO CONTEXTO DO COMPONENT EM ESPECÍFICO)
        POST 1 -> KEY CONTEUDO  - componente 1
        POST 2 -> KEY CONTEUDO  - componente 2
        conteudo 1 e conteudo 2 podem ser iguais, pois os contextos dos componentes sao diferentes!!
    <p key={line.content}><a href="#">{line.content}</a></p>

--
Mas, em comentarios, quando temos a lista de comentarios dentro de um componente pai POST, ai cada comentario deve ter, obrigatoriamente, uma key ÚNICA!!!
            <Comment 
              key={comment}
              content={comment}
            /> 
//NAO RECOMENDADO, pois pode ter comentários iguais!!

            <Comment 
              key={comment.date}
              content={comment.content}
            />
//UTILIZE UMA KEY UNICA (POR EXEMPLO, UMA KEY VINDA DIRETAMENTE DO BACKEND, Q É UNICA - tipo um ID) - aqui usei a data

______________

IMUTABILIDADE:
as variáveis nao sofrem mutação. nós criamos um novo valor (um novo espaço na memória) /e nao atualizamos o valor
Permite sermos mais performáticos!!! criar um novo valor na memória e comparamos este novo valor com o anterior (para checar o q mudou ou nao mudou)


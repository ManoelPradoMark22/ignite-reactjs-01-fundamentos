//Default Expots vs Named Exports

/*Default Exports
Pode mudar o nome para o componente na IMPORTAÇÃO!

function Post() {
  return <p>Post</p>
}

export default Post

// no arquivo , onde vai importar:
import Post from './Post';
*/

/*Default Exports
NÃO pode mudar o nome para o componente na IMPORTAÇÃO!

export function Post() {
  return <p>Post</p>
}

// no arquivo , onde vai importar:
import { Post } from './Post';
*/

_________________________


css modules documentation:
https://github.com/css-modules/css-modules

por exemplo, se vc quer q um componente tenha uma estilização única e nao interfira nas demais
 - crie o arquivo de estilização com o sufixo: .module.css   , por exemplo: Header.module.css
 - procure utilizar somente classes - no React é className (evite usar outros tipos de selecao, como ids)

O Vite já traz o suporte para o css modules:
https://vitejs.dev/guide/features#css-modules

_________________________

 --- box model css ---
box-sizing: border-box; -> faz com que o padding, margin e o border do elemento
nunca aumentem sua largura/altura, e sim espremam o elemento para dentro

_________________________

default-color-palette
https://tailwindcss.com/docs/customizing-colors#default-color-palette


_________________________


Importando fonts do Google:
https://fonts.google.com/specimen/Roboto

gera o codigo de importacao:

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">

os links de preconnect é recomendavel deixar no tomo, logo abaixo do <meta...

<head>
    <meta charset="UTF-8" />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

_________________________

no body (nos nav q usam o webkit, para deixar a font mais fininha):
-webkit-font-smoothing: antialiased;

_________________________

por padrao, os elem input, textarea, buton  NAO HERDAM A FONT DO BODY!
body, input, textarea, buton {
  font-family: 'Roboto', sans-serif;
  font-weight: 400;
  font-size: 1rem;
}

sempre utilize unidades de medida relativa (como o rem)
1rem -> utiliza 1 unidade relativa do tamanho padrao do HTML, q é 16px
1rem -> 16px (caso o usuario nao aumente ou diminua pelo sistema)

usar para tamanho de fontes, botoes, espaçamentos - assim, nossa interface aumenta/dimunui de forma padrao / totalitaria

----------

 margin: 2rem auto;  -> o auto faz com q fique centralizdo - como ali esta na parte horizontal, centaliza na horizontal

----------
  estilizando a side-bar (esquerda) e o main (direita)
  display: grid;
  grid-template-columns: 256px 1fr;
     256px (a primeira parte do grid vai ter o tamanho fixo de 256px)
     1fr (a segunda partee do grid vai ter o tamanho fléxivel, alcançando o tamanho maximo possivel)
  gap: 2rem; -> espaçamento entre as colunas
  align-items: flex-start; -> as colunas sempre ficam alinhados para o TOPO! pois se nao colocarmos assim, o padrao (stretch) seria tentar esticar os dois para baixo q ambos tenham o mesmo tamanho

  no display grid, é valido dar um inspecionar elemento no chrome, e ir no grid (vc pode testar os diferentes align itens)

_________________________

object-fit: cover; -> nao vai distorcer a imagem. ela vai caber na div um pedaco, vai ser recortada

-------------------------

qnd usa display: block; NAO PRECISA DO WIDHT 100%, POIS JA APLICA AUTOMATICAMENTE!

-------------------

box-sizing: initial  -> qnd adicionamos bordas, padding, outline etc , vai fazer com que ocupe um espaço a mais, e nao comprima o conteúdo para dentro

.avatar {
  box-sizing: initial;
  width: 3rem;
  height: 3rem;
  border-radius: 8px;
  border: 4px solid var(--gray-800);
  outline: 2px solid var(--green-500);
}

outra forma é usando cálculos no css!
.avatar {
  width: calc(3rem + 12px);
  height: calc(3rem + 12px);
  border-radius: 8px;
  border: 4px solid var(--gray-800);
  outline: 2px solid var(--green-500);
}
4px esquerda e direita = 8px + 
2 px esq e direita  = 4px
  = 12px


---------------------

margin-top: calc(0px - 1.5rem - 6px)  COMO eu quero negativo, eu inicio 0px e subtraio em seguida
  - como eu quero centralizar na vertical, eu divido por dois os espaços extras q foram somados abaixo

.profile {
  display: flex;
  flex-direction: column;
  align-items: center;

  margin-top: calc(0px - 1.5rem - 6px)  //ESSE AQUI
}

.avatar {
  width: calc(3rem + 12px);
  height: calc(3rem + 12px);
  border-radius: 8px;
  border: 4px solid var(--gray-800);
  outline: 2px solid var(--green-500);
}


_________________________
line-height: 1.6;  -> 160%


-----------------------------

.post + .post {
  margin-top: 2rem;
}
quero estilizar APENAS OS post tenham um post ANTES dele!! - por exemplo, se temos 2: o primeiro nao recebe, mas o ultimo recebe


_________________________

.post > header {

}  o sinal de > ali informa que a estilização vai ser aplicada apenas para o 1º nivel interno do header em post (se tivermos outros headers em niveis mais internos, nao herdara a estilizacao)

------------------------

para ficar um abaixo do outro podemos fazer assim:
.authorInfo {
  display: flex;
  flex-direction: column;
}


ou podemos colocar o display block em cada um:
.authorInfo strong {
  display: block;
}

.authorInfo span {
  display: block;
}

---------------------------

.commentForm footer {
  visibility: hidden;
  max-height: 0;
}

.commentForm:focus-within footer{
  visibility: visible;
  max-height: none;
}

focus-within -> se houver um focus em qualquer elemento dentro do .commentForm, quero aplicar alguma esitlização no footer


_________________________

.comment {
  margin-top: 1.5rem;
  display: flex;
  gap: 1rem;
}

.commentBox {
  flex: 1;
}

em .comment, temos o commentBox e o Avatar.
como no pai (.comment) temos o display flex, o flex 1 atribuido em commentBox (filho) faz com q ele estique o maximo possivel o restnate do espaco

----------------------

.commentContent header button {
  background: transparent;
  border: 0;
  color: var(--gray-400);
  cursor: pointer;

  line-height: 0;
}
line-height: o no button faz com que a borda do botao fique bem colada com o icone (va apertando TAB e vc vai notar)

------------

.commentBox footer button span::before {
  content: "\2022";
  padding: 0 0.25rem;
}
::before   ->  dentro do span , antes dele (mas dentro do span) estou inerindo aquela bolinha/simboldo do html 